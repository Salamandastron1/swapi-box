{"version":3,"sources":["images/2048.svg","images/mil-falc.svg","images/death-star.svg","Components/Button/Button.js","Components/Card/Card.js","Components/CardContainer/CardContainer.js","Components/Scroll/Scroll.js","Components/API/API.js","Components/ErrorHandler/ErrorHandler.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","_ref","buttonHasBeenPressed","directory","selected","react_default","a","createElement","className","NavLink","to","onClick","concat","favorites","length","people","planets","vehicles","Card","props","cardData","properties","map","property","i","key","favoriteACard","id","favorited","src","img2","img1","name","CardContainer","starWarsDirectory","stateOfButtons","cardCategory","category","cards","card","Route","exact","path","render","Components_Card_Card","swLoadGif","Scroll","movieScroll","randomMovie","Math","floor","random","Components_CardContainer_CardContainer","lib_default","opening_crawl","title","release_date","searchStarWarsAPI","Object","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","status","Error","json","abrupt","t0","stop","this","_x","apply","arguments","fetchPeopleData","_ref2","_callee3","unresolvedPromises","_context3","results","_ref3","_callee2","person","species","planet","_context2","homeworld","objectSpread","properName","_x3","Promise","all","_x2","fetchPlanetData","_ref4","_callee6","_context6","_ref5","_callee5","planetResidents","planetCard","_context5","residents","_ref6","_callee4","resident","_context4","_x6","population","climate","terrain","_x5","_x4","fetchVehicleData","_ref7","_callee7","vehicleData","_context7","vehicle","model","vehicle_class","passengers","_x7","makePlanetCard","item","makePeopleCard","putDataIntoStorage","data","localStorage","setItem","JSON","stringify","checkLocalStorage","retrievedJSON","getItem","parse","ErrorHandler","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","App","categoryName","newCards","fetchedPlanet","API","changeButtonValues","defineProperty","buttonName","newButtonState","keys","forEach","button","_objectSpread3","toConsumableArray","splice","join","checkingFavorites","filterFavorties","newCategory","selectedCard","upDateToggle","cardArray","undefined","filter","isLoaded","URLs","movieScrollData","films","resolvedData","_this$state","Components_ErrorHandler_ErrorHandler","Components_Button_Button","Components_Scroll_Scroll","Boolean","window","location","hostname","match","router","BrowserRouter","Components_App_App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47657861.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2048.05b82421.svg\";","module.exports = __webpack_public_path__ + \"static/media/mil-falc.6e0d896c.svg\";","module.exports = __webpack_public_path__ + \"static/media/death-star.d9b2065f.svg\";","import React from 'react';\nimport './Button.css';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ buttonHasBeenPressed, directory, selected }) => {\n    return (\n      <section className=\"button-container\">\n      <NavLink to='/favorites'\n          onClick={() => buttonHasBeenPressed( null,'favorites')} \n          className={`${selected.favorites ? 'selected': null} favorites-btn button`}>\n        <i className=\"fab fa-trade-federation\"></i>\n            {`Favorites ${directory.favorites.length}`}\n      </NavLink>\n        <NavLink to='/people' \n          onClick={() => buttonHasBeenPressed(directory.people, 'people')}  \n          className={`${selected.people ? 'selected': null} people-btn button`} \n        >\n          <i className=\"fab fa-jedi-order\"></i>\n            People\n        </NavLink>\n        <NavLink \n          to='/planets'\n          onClick={() => buttonHasBeenPressed(directory.planets, 'planets')}  \n          className={`${selected.planets ? 'selected': null} planets-btn button`}>\n          <i className=\"fab fa-empire\"></i>\n            Planets\n        </NavLink>\n        <NavLink\n          to='/vehicles'\n          onClick={() => buttonHasBeenPressed(directory.vehicles, 'vehicles')}  \n          className={`${selected.vehicles ? 'selected': null} vehicles-btn button`}>\n          <i className=\"fab fa-galactic-republic\"></i>\n            Vehicles\n        </NavLink>\n      </section>\n    )\n  }\n\nButton.propTypes = {\n  buttonHasBeenPressed: PropTypes.func,\n  directory: PropTypes.object,\n  selected: PropTypes.object\n};\n\nexport default Button;","import React from 'react';\nimport './Card.css';\nimport img1 from '../../images/mil-falc.svg';\nimport img2 from '../../images/death-star.svg';\nimport PropTypes from 'prop-types';\n\nconst Card = (props) => {\n  const cardData = props.properties.map((property, i) => {\n    return <div key={property + i}>{property}</div>\n  })\n  return(\n    <div className='card'>\n        <button \n          onClick={() => props.favoriteACard(props.id)}\n          className={props.favorited ? 'favorited' : 'null'}\n        >\n        <img src={props.favorited ? img2 : img1} className='mil-falc' />\n          <h3>Favorite</h3>\n        </button>\n      <h3>{props.name}</h3>\n      {cardData}\n      <div>\n      </div>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  props: PropTypes.object\n};\n\nexport default Card;","import React from 'react';\nimport './CardContainer.css';\nimport Card from '../Card/Card';\nimport { Route, NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport swLoadGif from '../../images/2048.svg'\n\nconst CardContainer = ({starWarsDirectory, stateOfButtons, favoriteACard, favorited, category}) => {\n  const cardCategory = category\n  let cards = [];\n  if(typeof starWarsDirectory === 'object') {\n    cards = starWarsDirectory.map((card, i) => {\n      return  <Route exact path={`/${cardCategory}`} \n                render={ () => {\n                  return (\n                      <Card\n                        key={i + [cardCategory]}\n                        name={card.name}\n                        properties={card.properties}\n                        favoriteACard={favoriteACard}\n                        id={card.id}\n                        favorited={card.favorited}\n                        />\n                      )\n                    }\n                  } \n                /> \n              })\n            }\n  if(cards.length <= 0 && cardCategory === 'favorites') {\n    return (\n      <section className={`${cards.length <=0 ? 'no-favs-container' : ''}card-container`}>\n        {cards.length <= 0? <div className='no-favs'>NoFavs</div>: cards}\n      </section>);\n  } else {\n    return (\n      <section className={`${cards.length <=0 ? 'load' : ''}card-container`}> \n        {cards.length <= 0? <img className='load-image'src={swLoadGif} />: cards} \n      </section>\n    )\n  }\n}\n\nCardContainer.propTypes = {\n  starWarsDirectory: PropTypes.array,\n  stateOfButtons: PropTypes.object,\n  favoriteACard: PropTypes.func,\n  favorited: PropTypes.object,\n  category: PropTypes.string\n};\n\nexport default CardContainer;","import React from 'react';\nimport './Scroll.css';\nimport Crawl from 'react-star-wars-crawl';\nimport 'react-star-wars-crawl/lib/index.css';\nimport CardContainer from '../CardContainer/CardContainer';\nimport {Route} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Scroll = ({ movieScroll, starWarsDirectory, stateOfButtons, favoriteACard }) => {\n  const getRandomIndice = Math.floor(Math.random() * Math.floor(6));\n  const randomMovie = movieScroll[getRandomIndice];\n\n  return (\n    <section className='scroll-container'>\n    <Route path='/favorites'     render={() => {\n        return( <CardContainer \n                    starWarsDirectory={starWarsDirectory.favorites}\n                    stateOfButtons={stateOfButtons}\n                    favoriteACard={favoriteACard}\n                    category='favorites'\n              />)\n            }\n          }\n      />\n      <Route path='/people'     render={() => {\n        return (<CardContainer \n                    starWarsDirectory={starWarsDirectory.people}\n                    stateOfButtons={stateOfButtons}\n                    favoriteACard={favoriteACard}\n                    category='people'\n                />)\n          }\n        }\n      />\n      <Route path='/planets'    render={() => {\n        return (<CardContainer \n                    starWarsDirectory={starWarsDirectory.planets}\n                    stateOfButtons={stateOfButtons}\n                    favoriteACard={favoriteACard}\n                    category='planets'\n                />)\n          }\n        }\n      />\n      <Route path='/vehicles'    render={() => {\n        return (<CardContainer \n                    starWarsDirectory={starWarsDirectory.vehicles}\n                    stateOfButtons={stateOfButtons}\n                    favoriteACard={favoriteACard}\n                    category='vehicles'\n                />)\n          }\n        }\n      />\n      <Crawl>\n        <p>{randomMovie.opening_crawl}</p>\n        <h3>{randomMovie.title}</h3>\n        <h4>{randomMovie.release_date}</h4>\n      </Crawl> \n    </section>\n  )\n}\n\nScroll.propTypes = {\n  starWarsDirectory: PropTypes.array,\n  movieScroll: PropTypes.array,\n  favoriteACard: PropTypes.func,\n  stateOfButtons: PropTypes.object\n};\n\nexport default Scroll;","export const searchStarWarsAPI = async (url) => { \n  const response = await fetch(url || \"https://swapi.co/api/\")\n  try {\n    if(response.status >= 400) {\n      throw new Error('fetch recieved an invalid response')\n    } else {\n      return await response.json();\n    }\n  }\n  catch {\n    throw Error('Problem with fetch')\n  }\n}\n\nexport const fetchPeopleData = async (url) => {\n\n  const people = await searchStarWarsAPI(url);\n  const unresolvedPromises = people.results.map( async (person) => {\n    const species = await searchStarWarsAPI(person.species)\n    const planet = await searchStarWarsAPI(person.homeworld)\n    return ({species: species, properName:person.name, ...planet})\n  })\n  return Promise.all(unresolvedPromises)\n}\n\nexport const fetchPlanetData = async url => {\n  const planets = await searchStarWarsAPI(url);\n  const unresolvedPromises = planets.results.map( async planet => {\n    const planetResidents = await Promise.all(planet.residents.map(async resident => {\n        return await searchStarWarsAPI(resident) \n      }))\n    const planetCard = {\n      name: planet.name,\n      population: planet.population,\n      climate: planet.climate,\n      terrain: planet.terrain,\n      residents: planetResidents\n      }\n    \n    return planetCard\n  })\n\n  return Promise.all(unresolvedPromises);\n}\n\nexport const fetchVehicleData = async url => {\n  const vehicles = await searchStarWarsAPI(url);\n  const vehicleData = vehicles.results.map((vehicle, i) => {\n    return {\n      name: vehicle.name,\n      id: i + 'vehicles',\n      favorited: false,\n      properties: [\n        `Model: ${vehicle.model}`,\n        `Class: ${vehicle.vehicle_class}`,\n        `# Of Passengers: ${vehicle.passengers}`\n      ]\n    } \n  })\n  return vehicleData\n}\n\nexport const makePlanetCard = category => {\n  const planetCard = category.map((item, i) => {\n    return {\n      name: item.name,\n      id: i + 'planets',\n      favorited: false,\n      properties: [\n        `Terrain: ${item.terrain}`,\n        `Population: ${item.population}`,\n        `Climate: ${item.climate}`,\n        `Residents: ${item.residents.map(resident => {\n          return resident.name\n        })}`\n      ]\n    }\n  })\n  return planetCard\n}\n\nexport const makePeopleCard = category => {\n  const personCard = category.map((item, i) => {\n    return {\n      name: item.properName,\n      id: i + 'people',\n      favorited: false,\n      properties: [\n        `Planet: ${item.name}`,\n        `Population: ${item.population}`,\n        `Species: ${item.species.name}`\n      ]\n    }\n  })\n  return personCard\n}\n\nexport const putDataIntoStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n\nexport const checkLocalStorage = key => {\n  const retrievedJSON = localStorage.getItem(key)\n  if(typeof retrievedJSON === 'string') {\n    const newData = JSON.parse(retrievedJSON)\n    return newData\n  } else {\n    return null\n  }\n}","import React, {Component} from 'react';\n\nclass ErrorHandler extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return (\n        <div>Ya gots an error</div>\n      )\n    } else {\n      return (\n        this.props.children\n      )\n    } \n  }\n}\n\nexport default ErrorHandler;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '../Button/Button';\nimport Scroll from '../Scroll/Scroll';\nimport * as API from '../API/API';\nimport ErrorHandler from '../ErrorHandler/ErrorHandler';\nimport { Route, NavLink } from 'react-router-dom';\nimport swLoadGif from '../../images/2048.svg'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      starWarsDirectory: {\n        people: {},\n        planets: {},\n        vehicles: {},\n        favorites: []\n    },\n      movieScroll: [],\n      isLoaded: false,\n      stateOfButtons: {\n        favorites: false,\n        vehicles: false,\n        planets: false,\n        people: false\n      }\n    }\n  }\n\n  async componentDidMount() {\n    let movieScrollData;\n    const URLs = await API.searchStarWarsAPI();\n    if(API.checkLocalStorage('movieScroll')) {\n      movieScrollData = API.checkLocalStorage('movieScroll')\n    } else {\n      const resolvedData = await API.searchStarWarsAPI(URLs.films);\n      movieScrollData = resolvedData.results\n     API.putDataIntoStorage('movieScroll', movieScrollData)\n    }\n    this.setState({\n        starWarsDirectory: {...this.state.starWarsDirectory, ...URLs},\n        movieScroll: movieScrollData, \n        isLoaded: true\n    })\n  }\n\n  buttonHasBeenPressed = async (url, categoryName) => {\n    let newCards;\n    if(API.checkLocalStorage(categoryName)){\n      newCards = API.checkLocalStorage(categoryName)\n    } else if(categoryName === 'favorites'){\n      newCards = this.state.starWarsDirectory.favorites\n    }else if (categoryName === 'people') {\n      const category = await API.fetchPeopleData(url)\n      newCards = API.makePeopleCard(category)\n    }else if (categoryName === 'planets') {\n      const fetchedPlanet = await API.fetchPlanetData(url);\n      newCards = await API.makePlanetCard(fetchedPlanet);\n    }else if (categoryName === 'vehicles') {\n      newCards = await API.fetchVehicleData(url);   \n    }\n    API.putDataIntoStorage(categoryName, newCards)\n    this.setState({\n      stateOfButtons: this.changeButtonValues(categoryName),\n      starWarsDirectory: {\n        ...this.state.starWarsDirectory,\n        [categoryName]: newCards,\n      }\n    }) \n  }\n\n  changeButtonValues = (buttonName) => {\n    let newButtonState = {}\n    Object.keys(this.state.stateOfButtons).forEach(button => {\n      if(button === buttonName) {\n        newButtonState[button] = true\n      } else {\n        newButtonState[button] = false\n      }\n    }) \n    return newButtonState\n  }\n\n  favoriteACard = (id) => {\n    let newCards;\n    const category = [...id].splice(1, 10).join('');\n    const state = this.state.starWarsDirectory\n    const checkingFavorites = this.filterFavorties(state.favorites, id)\n    const newCategory = this.filterFavorties(state[category], id)\n    const selectedCard = this.filterFavorties(state[category], id, true)\n\n    if(state.favorites.length !== checkingFavorites.length) {\n      newCards = checkingFavorites\n    } else {\n      newCards = [...selectedCard, ...state.favorites];\n    }\n    const upDateToggle = [...selectedCard, ...newCategory] \n    API.putDataIntoStorage('favorites', newCards)\n    API.putDataIntoStorage([category], upDateToggle)\n\n    this.setState({\n      starWarsDirectory: {\n      ...this.state.starWarsDirectory,\n      [category]: upDateToggle,\n      favorites: newCards\n      }\n    })\n  }\n\n  filterFavorties = (cardArray, id, selected = false) => {\n    if(selected === true) {\n      const selectedCard = cardArray.filter(card => {\n        return card.id === id\n      })\n      selectedCard[0].favorited = !selectedCard[0].favorited\n      return selectedCard\n    } else {\n      return cardArray.filter(card => {\n        return card.id !== id\n      })\n    }\n  }\n\n  render() {\n    const { movieScroll, isLoaded, starWarsDirectory, stateOfButtons} = this.state\n    if(!isLoaded){\n      return (<div className='load'> \n                <img className='load-image'src={swLoadGif} /> \n              </div>)\n    } else { \n      return (\n        <ErrorHandler>\n          <div \n          className=\"App\">\n            <section className='content'>\n              <Button \n                buttonHasBeenPressed={this.buttonHasBeenPressed} \n                directory={starWarsDirectory}\n                selected={stateOfButtons}\n              />\n            </section>\n              <header>\n               <h1 className=\"title\">SWAPI BOX</h1>\n                <Scroll \n                  movieScroll={movieScroll}\n                  starWarsDirectory={starWarsDirectory}\n                  stateOfButtons={stateOfButtons}\n                  favoriteACard={this.favoriteACard}\n                />\n              </header>\n          </div>\n        </ErrorHandler>\n      );\n    }\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}